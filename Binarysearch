package JavaDSA;

public class binarysearch {

	public static void main(String[] args) {
		int[] arr = {1,4,5,6,7,8,19,20,87};
		int target = 20;
		int ans= findtarget(arr, target);
		System.out.println(ans);

//		-------------  order agnostic array search ---------------------
		int[] arr = {50,10,6};
		int target = 10;
		int ans = orderagnostic(arr, target);
		System.out.println(ans);
	}

	static int findtarget(int[] arr, int num) {
		int target = num;
		int start =0;
		int end = arr.length - 1;
	
		while(start<=end) {
			int middle = start + (end-start)/2;
			
			if(target<arr[middle]) {
				end = middle-1;
			}
			else if(target>arr[middle]){
				start = middle+1;
			}
			else {
				return middle;
}
}
		return -1;
}

////	-======    FUNCTION for order agnostic binary ==================
//	static int orderagnostic(int[] arr, int target) {
//		
//		int start =0;
//		int end = arr.length-1;
//		
//		if(arr[0] < arr[end]) {
//			while(start<=end) {
//				int mid = start + (end-start)/2;
//				
//				if(target> arr[mid]) {
//					start = mid+1;
//				}
//				else if (target < arr[mid]) {
//					end = mid-1;
//				}
//				else {
//					return mid;
//				}
//			}
//		}
//		else if (arr[0] > arr[end]){
//			while(start<=end) {
//				int mid = start + (end-start)/2;
//				
//				if(target> arr[mid]) {
//					end = mid-1;
//				}
//				else if (target < arr[mid]) {
//					start = mid+1;
//				}
//				else {
//					return mid;
//				}
//			}
//		}
//		else {
//			return 0;
//		}
//		
//		return -1;
//	}
